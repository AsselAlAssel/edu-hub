datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  passwordResetToken     String?  
  passwordResetTokenExp  DateTime?
  role                   String?   @default("USER")
  createdAt              DateTime  @default(now())
  accounts               Account[]
  sessions               Session[]
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Class {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  folders  Folder[] @relation("ClassFolders")
  videos   Video[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  parentClass   Class    @relation("ClassFolders", fields: [classId], references: [id])
  classId       String   @db.ObjectId
  parentFolder  Folder?  @relation("ParentFolder", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentFolderId String? @db.ObjectId
  subFolders    Folder[] @relation("ParentFolder")
  videos        Video[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Video {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  url        String
  classId    String?  @db.ObjectId
  class      Class?   @relation(fields: [classId], references: [id])
  folderId   String?  @db.ObjectId
  folder     Folder?  @relation(fields: [folderId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}