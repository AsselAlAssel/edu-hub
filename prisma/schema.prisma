datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum ResourceType {
  VIDEO
  FILE
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId @unique
  sessionId    String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  passwordResetToken     String?  
  passwordResetTokenExp  DateTime?
  role                   String?   @default("USER")
  createdAt              DateTime  @default(now())
  session                Session?  @relation
}

model VerificationToken {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  folders     Folder[] @relation("ClassFolders")
  files       File[]
  videos      Video[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  parentClass    Class    @relation("ClassFolders", fields: [classId], references: [id])
  classId        String   @db.ObjectId
  parentFolder   Folder?  @relation("ParentFolder", fields: [parentFolderId], references: [id], onDelete: NoAction ,onUpdate: NoAction)
  parentFolderId String?  @db.ObjectId
  subFolders     Folder[] @relation("ParentFolder")
  files          File[]
  videos         Video[]
  isRoot         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String
  type        String
  folder      Folder   @relation(fields: [folderId], references: [id])
  folderId    String   @db.ObjectId
  class       Class    @relation(fields: [classId], references: [id])
  classId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  videoId     String
  url         String
  thumbnail   String
  folder      Folder   @relation(fields: [folderId], references: [id])
  folderId    String   @db.ObjectId
  class       Class    @relation(fields: [classId], references: [id])
  classId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
